[{"C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\index.js":"1","C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\App.js":"2","C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\reportWebVitals.js":"3","C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\GamesList.js":"4","C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\functions.js":"5","C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\BoxScore.js":"6","C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\reload.js":"7"},{"size":347,"mtime":1612428745059,"results":"8","hashOfConfig":"9"},{"size":464,"mtime":1612427371413,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":3289,"mtime":1612427911714,"results":"12","hashOfConfig":"9"},{"size":626,"mtime":1612428761038,"results":"13","hashOfConfig":"9"},{"size":7296,"mtime":1612427480901,"results":"14","hashOfConfig":"9"},{"size":1042,"mtime":1612429168986,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jmdc6j",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\index.js",[],"C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\App.js",[],["33","34"],"C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\reportWebVitals.js",[],"C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\GamesList.js",["35"],"import React from 'react';\r\nimport requestData from './functions.js';\r\nimport {Button} from 'react-bootstrap';\r\nimport BoxScore from './BoxScore.js';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n/**\r\n *  Used for retrieving photos from the /images folder using only the image name\r\n *  Returns the link to the image with the given name\r\n */\r\nconst getImage = (name) => {\r\n    return `${process.env.PUBLIC_URL}/assets/images/` + name + '.png'\r\n}\r\n\r\n\r\n/**\r\n *  Calculates the tipoff time in the user's timezone\r\n *  Returns the calculated time\r\n */\r\nconst getGameTime = (game) => {\r\n    // Fix, include dates on hours past 24 and on hours below 0\r\n    var timeUTC = game.gameTimeUTC.match(/\\d\\d:\\d\\d:\\d\\d/)[0];\r\n    var date = new Date();\r\n    var offset = date.getTimezoneOffset();\r\n\r\n    var hours = parseInt(timeUTC.match(/\\b\\d\\d:/)[0].match(/\\d\\d/)[0]);\r\n    var minutes = parseInt(timeUTC.match(/:\\d\\d:/)[0].match(/\\d\\d/)[0]);\r\n\r\n    // Weird but works\r\n    var totalMins = hours * 60 + minutes - offset;\r\n    var localHour = Math.floor(totalMins/60);\r\n    var localMins = totalMins % 60;\r\n    var period;\r\n    if (localHour > 12) {\r\n        localHour = localHour - 12;\r\n        period = 'pm';\r\n    }\r\n    else if (localHour == 12) {\r\n        period = 'pm';\r\n    }\r\n    else if (localHour < 0) {\r\n        localHour = localHour + 12;\r\n        period = 'pm';\r\n    }\r\n    else {\r\n        period = 'am';\r\n    }\r\n    if (localMins < 0) {\r\n        localMins = localMins + 60;\r\n    }\r\n\r\n    var localTime;\r\n    if (localMins < 10) {\r\n        localTime = localHour + ':0' + localMins + ' ' + period;\r\n    }\r\n    else {\r\n        localTime = localHour + ':' + localMins + ' ' + period;\r\n    }\r\n\r\n    return localTime;\r\n}\r\n\r\n\r\n/**\r\n *  Determines formatting for different game statuses\r\n *      e.g.\r\n *          Before tipoff: Game time in local time\r\n *          Live game: Red, bolded status\r\n *  Returns the formatted status\r\n */\r\nconst getStatus = (game) => {\r\n    var status = game.gameStatusText;\r\n    if (status.includes('ET')) {\r\n        status = getGameTime(game);\r\n    }\r\n    if (status.includes('Q') || status.includes('Half')) {\r\n        return <h3 style={{color: 'red', fontWeight: 'bold'}}>{status}</h3>\r\n    }\r\n    return <h3>{status}</h3>;\r\n}\r\n\r\n\r\n/**\r\n *  Requests the scoreboard from nba.com\r\n *  Returns the acquired data\r\n */\r\nconst getTodaysScoreboard = () => {\r\n    const url='/static/json/liveData/scoreboard/todaysScoreboard_00.json';\r\n    return requestData(url).scoreboard;\r\n}\r\n\r\n\r\n/**\r\n *  Creates the individual game boxes\r\n */\r\nconst GamesList = () => {\r\n\r\n    const handlePress = (game) => {\r\n        BoxScore(game);\r\n    }\r\n\r\n    var data = getTodaysScoreboard()\r\n    return data.games.map(game => {\r\n      return (\r\n        <div key={game.gameId}>\r\n          <h2><img src={getImage(game.homeTeam.teamId)} alt={game.homeTeam.teamName} height='30'></img> {game.homeTeam.teamTricode} vs {game.awayTeam.teamTricode} <img src={getImage(game.awayTeam.teamId)} alt={game.awayTeam.teamName} height='30'></img></h2>\r\n          <p>{game.homeTeam.score} : {game.awayTeam.score}</p>\r\n          {getStatus(game)}\r\n          <Button variant=\"dark\" onClick={() => handlePress(game)}>Box Score</Button>{' '}\r\n        </div>\r\n      )\r\n    })\r\n}\r\n\r\nexport default GamesList;","C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\functions.js",[],"C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\BoxScore.js",["36","37","38","39","40"],"import requestData from './functions.js';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\n/**\r\n *  Formats the minutes from nba.com data to make it readable\r\n *  Returns the formatted minutes\r\n */\r\nconst formatMinutes = (minutes) => {\r\n    var totMinutes = parseInt(minutes.match(/\\d\\dM/)[0].slice(0, -1));\r\n    var totSeconds = minutes.match(/\\d\\d\\./)[0].slice(0, -1);\r\n\r\n    if(totMinutes == 0 && totSeconds == '00') {\r\n        return '0';\r\n    }\r\n    return totMinutes + ':' + totSeconds;\r\n}\r\n\r\n\r\n/**\r\n *  Used for retrieving photos from the /images folder using only the image name\r\n *  Returns the link to the image with the given name\r\n */\r\nconst getImage = (name) => {\r\n    return `${process.env.PUBLIC_URL}/assets/images/` + name + '.png'\r\n}\r\n\r\n\r\n/**\r\n *  Sums the given stat of each player on the inputted team\r\n *  Returns the total\r\n */\r\nconst sumStat = (team, stat) => {\r\n    var total = 0;\r\n    team.map(player => {\r\n        total += parseInt(player.statistics[stat]);\r\n        return null;\r\n    })\r\n    return total;\r\n}\r\n\r\n\r\n/**\r\n *  Generates the totals for each stat on the given team\r\n *  Returns a table row with the summed stats in the correct columns\r\n */\r\nconst generateTotals = (team, plusMinus) => {\r\n    return (\r\n        <tr>\r\n            <td colSpan='3'>Totals</td>\r\n            <td>{sumStat(team, 'points')}</td>\r\n            <td>{sumStat(team, 'assists')}</td>\r\n            <td>{sumStat(team, 'reboundsTotal')}</td>\r\n            <td>{sumStat(team, 'reboundsOffensive')}</td>\r\n            <td>{sumStat(team, 'reboundsDefensive')}</td>\r\n            <td>{sumStat(team, 'steals')}</td>\r\n            <td>{sumStat(team, 'blocks')}</td>\r\n            <td>{sumStat(team, 'fieldGoalsMade')}</td>\r\n            <td>{sumStat(team, 'fieldGoalsAttempted')}</td>\r\n            <td>{(sumStat(team, 'fieldGoalsMade')/sumStat(team, 'fieldGoalsAttempted') * 100).toFixed(1)}</td>\r\n            <td>{sumStat(team, 'threePointersMade')}</td>\r\n            <td>{sumStat(team, 'threePointersAttempted')}</td>\r\n            <td>{(sumStat(team, 'threePointersMade')/sumStat(team, 'threePointersAttempted') * 100).toFixed(1)}</td>\r\n            <td>{sumStat(team, 'freeThrowsMade')}</td>\r\n            <td>{sumStat(team, 'freeThrowsAttempted')}</td>\r\n            <td>{(sumStat(team, 'freeThrowsMade')/sumStat(team, 'freeThrowsAttempted') * 100).toFixed(1)}</td>\r\n            <td>{sumStat(team, 'foulsPersonal')}</td>\r\n            <td>{plusMinus}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\n\r\n/**\r\n *  Generates the stats for each player on the given team\r\n *  Returns one table row for each player, with their stats filled in the correct column\r\n */\r\nconst generateTeamStats = (team) => {\r\n    return team.map(player => {\r\n        if (player.status == 'ACTIVE') {\r\n            return (\r\n                <tr key={player.personId}>\r\n                    <td>{player.nameI}</td>\r\n                    <td>{player.position}</td>\r\n                    <td>{formatMinutes(player.statistics.minutes)}</td>\r\n                    <td>{player.statistics.points}</td>\r\n                    <td>{player.statistics.assists}</td>\r\n                    <td>{player.statistics.reboundsTotal}</td>\r\n                    <td>{player.statistics.reboundsOffensive}</td>\r\n                    <td>{player.statistics.reboundsDefensive}</td>\r\n                    <td>{player.statistics.steals}</td>\r\n                    <td>{player.statistics.blocks}</td>\r\n                    <td>{player.statistics.fieldGoalsMade}</td>\r\n                    <td>{player.statistics.fieldGoalsAttempted}</td>\r\n                    <td>{(player.statistics.fieldGoalsPercentage * 100).toFixed(1)}</td>\r\n                    <td>{player.statistics.threePointersMade}</td>\r\n                    <td>{player.statistics.threePointersAttempted}</td>\r\n                    <td>{(player.statistics.threePointersPercentage * 100).toFixed(1)}</td>\r\n                    <td>{player.statistics.freeThrowsMade}</td>\r\n                    <td>{player.statistics.freeThrowsAttempted}</td>\r\n                    <td>{(player.statistics.freeThrowsPercentage * 100).toFixed(1)}</td>\r\n                    <td>{player.statistics.foulsPersonal}</td>\r\n                    <td>{player.statistics.plusMinusPoints}</td>\r\n                </tr>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <tr key={player.personId}>\r\n                    <td>{player.nameI}</td>\r\n                    <td colSpan='20' style={{textAlign: 'center'}}>OUT{player.notPlayingDescription != undefined && player.notPlayingDescription != ''  ? ' - ' + player.notPlayingDescription : ''}</td>\r\n                </tr>\r\n            )\r\n        }\r\n    })\r\n}\r\n\r\n\r\n/**\r\n *  Creates the full box score table, including the header and footer\r\n *  Returns the created box score table\r\n */\r\nconst generateTable = (id, team, score, oppScore) => {\r\n    var teamPlusMinus = score - oppScore;\r\n    return (\r\n        <table id={id}>\r\n            <thead>\r\n                <tr>\r\n                    <th>PLAYER</th>\r\n                    <th>POS</th>\r\n                    <th>MINS</th>\r\n                    <th>PTS</th>\r\n                    <th>AST</th>\r\n                    <th>REB</th>\r\n                    <th>OREB</th>\r\n                    <th>DREB</th>\r\n                    <th>STL</th>\r\n                    <th>BLK</th>\r\n                    <th>FGM</th>\r\n                    <th>FGA</th>\r\n                    <th>FG%</th>\r\n                    <th>3PM</th>\r\n                    <th>3PA</th>\r\n                    <th>3P%</th>\r\n                    <th>FTM</th>\r\n                    <th>FTA</th>\r\n                    <th>FT%</th>\r\n                    <th>PF</th>\r\n                    <th>+/-</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {generateTeamStats(team)}\r\n            </tbody>\r\n            <tfoot>\r\n                {generateTotals(team, teamPlusMinus)}\r\n            </tfoot>\r\n        </table>\r\n    )\r\n}\r\n\r\n\r\n/**\r\n *  Creates the box score for the given game\r\n *  Returns null\r\n */\r\nconst BoxScore = (game) => {\r\n    var data;\r\n    const url='/static/json/liveData/boxscore/boxscore_' + game.gameId + '.json';\r\n\r\n    // Testing url\r\n    // var url = '/static/json/liveData/boxscore/boxscore_0022000071.json';\r\n\r\n    try {\r\n        data = requestData(url, false).game;\r\n    }\r\n    catch (err) {\r\n        ReactDOM.render(\r\n            <div>\r\n                <h2>No Box Score Available Yet</h2>\r\n            </div>\r\n        , document.getElementById('boxscore'));\r\n        return null;\r\n    }\r\n    // console.log(data);\r\n\r\n    var scoreHome = data.homeTeam.score;\r\n    var scoreAway = data.awayTeam.score;\r\n\r\n    // Creating the Box Score Area\r\n    ReactDOM.render(\r\n        <div>\r\n            <h2><img src={getImage(data.homeTeam.teamId)} height='50' alt={data.homeTeam.teamName}></img> {data.homeTeam.teamCity} {data.homeTeam.teamName}</h2>\r\n            {generateTable('home', data.homeTeam.players, scoreHome, scoreAway)}\r\n            <h2><img src={getImage(data.awayTeam.teamId)} height='50' alt={data.awayTeam.teamName}></img> {data.awayTeam.teamCity} {data.awayTeam.teamName}</h2>\r\n            {generateTable('away', data.awayTeam.players, scoreAway, scoreHome)}\r\n        </div>\r\n    \r\n    , document.getElementById('boxscore'));\r\n}\r\n\r\nexport default BoxScore;","C:\\Users\\picog\\Documents\\Websites\\React\\basketball-scores\\src\\reload.js",["41","42"],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":39,"column":24,"nodeType":"49","messageId":"50","endLine":39,"endColumn":26},{"ruleId":"47","severity":1,"message":"48","line":13,"column":19,"nodeType":"49","messageId":"50","endLine":13,"endColumn":21},{"ruleId":"47","severity":1,"message":"48","line":13,"column":38,"nodeType":"49","messageId":"50","endLine":13,"endColumn":40},{"ruleId":"47","severity":1,"message":"48","line":80,"column":27,"nodeType":"49","messageId":"50","endLine":80,"endColumn":29},{"ruleId":"47","severity":1,"message":"51","line":111,"column":101,"nodeType":"49","messageId":"50","endLine":111,"endColumn":103},{"ruleId":"47","severity":1,"message":"51","line":111,"column":146,"nodeType":"49","messageId":"50","endLine":111,"endColumn":148},{"ruleId":"52","severity":1,"message":"53","line":10,"column":25,"nodeType":"54","messageId":"55","endLine":10,"endColumn":27},{"ruleId":"47","severity":1,"message":"51","line":11,"column":32,"nodeType":"49","messageId":"50","endLine":11,"endColumn":34},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]